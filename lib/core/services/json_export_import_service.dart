import 'dart:convert';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'jsonbin_service.dart';

class JsonExportImportService {
  static final JsonExportImportService _instance =
      JsonExportImportService._internal();
  factory JsonExportImportService() => _instance;
  JsonExportImportService._internal();

  final JsonBinService _jsonBinService = JsonBinService();

  // JSON dosyalarÄ±nÄ± export etme
  Future<void> exportJsonFiles() async {
    try {
      print('ðŸ“¤ Export iÅŸlemi baÅŸlatÄ±lÄ±yor...');

      // JSONBin.io'dan verileri Ã§ek
      print('ðŸ“¡ JSONBin.io\'dan veriler Ã§ekiliyor...');
      final customers = await _jsonBinService.getCustomers();
      final payments = await _jsonBinService.getPayments();
      final dues = await _jsonBinService.getDues();

      print('ðŸ“Š Veriler Ã§ekildi:');
      print('  - MÃ¼ÅŸteri: ${customers.length} kayÄ±t');
      print('  - Ã–deme: ${payments.length} kayÄ±t');
      print('  - Tahakkuk: ${dues.length} kayÄ±t');

      // GeÃ§ici dosyalar oluÅŸtur
      Directory directory = await getApplicationDocumentsDirectory();
      final filesToShare = <XFile>[];

      // MÃ¼ÅŸteri dosyasÄ±
      if (customers.isNotEmpty) {
        final customerFile = File('${directory.path}/musteri.json');
        await customerFile.writeAsString(jsonEncode(customers));
        filesToShare.add(XFile(customerFile.path));
        print('âœ… musteri.json oluÅŸturuldu');
      }

      // Ã–deme dosyasÄ±
      if (payments.isNotEmpty) {
        final paymentFile = File('${directory.path}/odeme.json');
        await paymentFile.writeAsString(jsonEncode(payments));
        filesToShare.add(XFile(paymentFile.path));
        print('âœ… odeme.json oluÅŸturuldu');
      }

      // Tahakkuk dosyasÄ±
      if (dues.isNotEmpty) {
        final dueFile = File('${directory.path}/tahakkuk.json');
        await dueFile.writeAsString(jsonEncode(dues));
        filesToShare.add(XFile(dueFile.path));
        print('âœ… tahakkuk.json oluÅŸturuldu');
      }

      print('ðŸ“¤ PaylaÅŸÄ±lacak dosya sayÄ±sÄ±: ${filesToShare.length}');

      if (filesToShare.isNotEmpty) {
        await Share.shareXFiles(
          filesToShare,
          text: 'Pina Aidat - Veri DosyalarÄ± (JSONBin.io\'dan export)',
          subject: 'Pina Aidat Veri Export',
        );
        print('âœ… Share iÅŸlemi baÅŸlatÄ±ldÄ±');
      } else {
        throw Exception('Export edilecek veri bulunamadÄ±');
      }
    } catch (e) {
      print('ðŸ’¥ Export hatasÄ±: $e');
      throw Exception('Export iÅŸlemi baÅŸarÄ±sÄ±z: $e');
    }
  }

  // JSON dosyalarÄ±nÄ± tek tek export etme
  Future<void> exportCustomers() async {
    try {
      print('ðŸ“¤ MÃ¼ÅŸteri export iÅŸlemi baÅŸlatÄ±lÄ±yor...');

      // JSONBin.io'dan mÃ¼ÅŸteri verilerini Ã§ek
      final customers = await _jsonBinService.getCustomers();

      if (customers.isNotEmpty) {
        // GeÃ§ici dosya oluÅŸtur
        Directory directory = await getApplicationDocumentsDirectory();
        final file = File('${directory.path}/musteri.json');
        await file.writeAsString(jsonEncode(customers));

        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'Pina Aidat - MÃ¼ÅŸteri Verileri (JSONBin.io\'dan export)',
          subject: 'MÃ¼ÅŸteri Listesi Export',
        );
        print('âœ… MÃ¼ÅŸteri export tamamlandÄ±: ${customers.length} kayÄ±t');
      } else {
        throw Exception('MÃ¼ÅŸteri verisi bulunamadÄ±');
      }
    } catch (e) {
      print('ðŸ’¥ MÃ¼ÅŸteri export hatasÄ±: $e');
      throw Exception('MÃ¼ÅŸteri export iÅŸlemi baÅŸarÄ±sÄ±z: $e');
    }
  }

  Future<void> exportPayments() async {
    try {
      print('ðŸ“¤ Ã–deme export iÅŸlemi baÅŸlatÄ±lÄ±yor...');

      // JSONBin.io'dan Ã¶deme verilerini Ã§ek
      final payments = await _jsonBinService.getPayments();

      if (payments.isNotEmpty) {
        // GeÃ§ici dosya oluÅŸtur
        Directory directory = await getApplicationDocumentsDirectory();
        final file = File('${directory.path}/odeme.json');
        await file.writeAsString(jsonEncode(payments));

        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'Pina Aidat - Ã–deme Verileri (JSONBin.io\'dan export)',
          subject: 'Ã–deme Listesi Export',
        );
        print('âœ… Ã–deme export tamamlandÄ±: ${payments.length} kayÄ±t');
      } else {
        throw Exception('Ã–deme verisi bulunamadÄ±');
      }
    } catch (e) {
      print('ðŸ’¥ Ã–deme export hatasÄ±: $e');
      throw Exception('Ã–deme export iÅŸlemi baÅŸarÄ±sÄ±z: $e');
    }
  }

  Future<void> exportDues() async {
    try {
      print('ðŸ“¤ Tahakkuk export iÅŸlemi baÅŸlatÄ±lÄ±yor...');

      // JSONBin.io'dan tahakkuk verilerini Ã§ek
      final dues = await _jsonBinService.getDues();

      if (dues.isNotEmpty) {
        // GeÃ§ici dosya oluÅŸtur
        Directory directory = await getApplicationDocumentsDirectory();
        final file = File('${directory.path}/tahakkuk.json');
        await file.writeAsString(jsonEncode(dues));

        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'Pina Aidat - Tahakkuk Verileri (JSONBin.io\'dan export)',
          subject: 'Tahakkuk Listesi Export',
        );
        print('âœ… Tahakkuk export tamamlandÄ±: ${dues.length} kayÄ±t');
      } else {
        throw Exception('Tahakkuk verisi bulunamadÄ±');
      }
    } catch (e) {
      print('ðŸ’¥ Tahakkuk export hatasÄ±: $e');
      throw Exception('Tahakkuk export iÅŸlemi baÅŸarÄ±sÄ±z: $e');
    }
  }

  // JSON dosyalarÄ±nÄ± import etme
  Future<void> importJsonFile(String filePath, String fileType) async {
    try {
      print('Import baÅŸlatÄ±lÄ±yor: $filePath, tip: $fileType');

      final file = File(filePath);
      if (!await file.exists()) {
        throw Exception('Dosya bulunamadÄ±: $filePath');
      }

      final content = await file.readAsString();
      print('Dosya iÃ§eriÄŸi okundu, boyut: ${content.length} karakter');

      final jsonData = jsonDecode(content);

      if (jsonData is! List) {
        throw Exception('GeÃ§ersiz JSON formatÄ± - Liste bekleniyor');
      }

      print('JSON geÃ§erli, ${jsonData.length} kayÄ±t bulundu');

      // Android iÃ§in external storage kullan, diÄŸer platformlar iÃ§in documents directory
      Directory directory;
      if (Platform.isAndroid) {
        directory = await getExternalStorageDirectory() ??
            await getApplicationDocumentsDirectory();
      } else {
        directory = await getApplicationDocumentsDirectory();
      }

      String targetFileName;

      switch (fileType) {
        case 'customers':
          targetFileName = 'musteri.json';
          break;
        case 'payments':
          targetFileName = 'odeme.json';
          break;
        case 'dues':
          targetFileName = 'tahakkuk.json';
          break;
        default:
          throw Exception('GeÃ§ersiz dosya tipi: $fileType');
      }

      final targetFile = File('${directory.path}/$targetFileName');
      print('Hedef dosya: ${targetFile.path}');

      await targetFile.writeAsString(content);
      print('Dosya baÅŸarÄ±yla kaydedildi');
    } catch (e) {
      print('Import hatasÄ±: $e');
      throw Exception('Import iÅŸlemi baÅŸarÄ±sÄ±z: $e');
    }
  }

  // Dosya bilgilerini alma
  Future<Map<String, dynamic>> getFileInfo() async {
    try {
      // Android iÃ§in external storage kullan, diÄŸer platformlar iÃ§in documents directory
      Directory directory;
      if (Platform.isAndroid) {
        directory = await getExternalStorageDirectory() ??
            await getApplicationDocumentsDirectory();
      } else {
        directory = await getApplicationDocumentsDirectory();
      }

      // Debug: Dizin yolunu yazdÄ±r
      print('Dosya dizini: ${directory.path}');

      final customerFile = File('${directory.path}/musteri.json');
      final paymentFile = File('${directory.path}/odeme.json');
      final dueFile = File('${directory.path}/tahakkuk.json');

      // Eski aidat.json dosyasÄ±nÄ± tahakkuk.json olarak yeniden adlandÄ±r
      final oldDueFile = File('${directory.path}/aidat.json');
      if (await oldDueFile.exists() && !await dueFile.exists()) {
        print(
            'aidat.json bulundu, tahakkuk.json olarak yeniden adlandÄ±rÄ±lÄ±yor');
        await oldDueFile.rename(dueFile.path);
      }

      // Debug: Dosya durumlarÄ±nÄ± yazdÄ±r
      print('musteri.json var mÄ±: ${await customerFile.exists()}');
      print('odeme.json var mÄ±: ${await paymentFile.exists()}');
      print('tahakkuk.json var mÄ±: ${await dueFile.exists()}');

      return {
        'customers': {
          'exists': await customerFile.exists(),
          'size': await customerFile.exists() ? await customerFile.length() : 0,
          'lastModified': await customerFile.exists()
              ? (await customerFile.lastModified()).millisecondsSinceEpoch
              : null,
        },
        'payments': {
          'exists': await paymentFile.exists(),
          'size': await paymentFile.exists() ? await paymentFile.length() : 0,
          'lastModified': await paymentFile.exists()
              ? (await paymentFile.lastModified()).millisecondsSinceEpoch
              : null,
        },
        'dues': {
          'exists': await dueFile.exists(),
          'size': await dueFile.exists() ? await dueFile.length() : 0,
          'lastModified': await dueFile.exists()
              ? (await dueFile.lastModified()).millisecondsSinceEpoch
              : null,
        },
      };
    } catch (e) {
      return {};
    }
  }

  // Dosya boyutunu formatla
  String formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
  }

  // Tarih formatla
  String formatDate(DateTime date) {
    return '${date.day.toString().padLeft(2, '0')}.${date.month.toString().padLeft(2, '0')}.${date.year} ${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';
  }
}
